#!/usr/bin/env bash

set -euo pipefail
shopt -s lastpipe nullglob dotglob

declare -r app_name="${0##*/}"

main() {
    declare opt_file
    declare opt_raw=0
    declare opt_db=0
    declare opt_cors=0
    declare opt_mail=0
    declare opt_caching=0
    declare opt_cookie=0
    declare opt_debug=0
    declare opt_logging=0
    declare opt_metadata=0
    declare opt_proxy=0
    declare opt_seo=0
    declare opt_server=0
    declare opt_session=0
    declare opt_site=0
    declare opt_fields=""

    while [[ $# -gt 0 ]]; do
        case "${1:-}" in
        --)
            shift
            break
            ;;
        -f | --file)
            opt_file="${2}"
            shift 2
            ;;
        --raw)
            opt_raw=1
            shift
            ;;
        --db)
            opt_db=1
            opt_fields+="${opt_fields:+,}db,host,user,password,dbtype,dbprefix,dbencryption,dbsslverifyservercert,dbsslkey,dbsslcert,dbsslca,dbsslcipher"
            shift
            ;;
        --cors)
            opt_cors=1
            opt_fields+="${opt_fields:+,}cors,cors_allow_headers,cors_allow_methods,cors_allow_origin"
            shift
            ;;
        --mail)
            opt_mail=1
            opt_fields+="${opt_fields:+,}mailonline,mailer,mailfrom,fromname,massmailoff,sendmail,smtphost,smtpport,smtpauth,smtpuser,smtppass,smtpsecure"
            shift
            ;;
        --caching)
            opt_caching=1
            opt_fields+="${opt_fields:+,}caching,cache_handler,cachetime,cache_platformprefix,memcached_server_host,memcached_server_port,memcached_persist,memcached_compress,redis_server_host,redis_server_port,redis_server_auth,redis_server_db,redis_persist"
            shift
            ;;
        --cookie)
            opt_cookie=1
            opt_fields+="${opt_fields:+,}cookie_domain,cookie_path"
            shift
            ;;
        --debug)
            opt_debug=1
            opt_fields+="${opt_fields:+,}debug,debug_lang,debug_lang_const,error_reporting"
            shift
            ;;
        --logging)
            opt_logging=1
            opt_fields+="${opt_fields:+,}log_path,log_categories,log_category_mode,log_deprecated,log_everything,log_priorities"
            shift
            ;;
        --metadata)
            opt_metadata=1
            opt_fields+="${opt_fields:+,}MetaDesc,MetaAuthor,MetaVersion,MetaRights,robots"
            shift
            ;;
        --proxy)
            opt_proxy=1
            opt_fields+="${opt_fields:+,}proxy_enable,proxy_host,proxy_port,proxy_user,proxy_pass"
            shift
            ;;
        --seo)
            opt_seo=1
            opt_fields+="${opt_fields:+,}sef,sef_rewrite,sef_suffix,unicodeslugs,sitename_pagetitles"
            shift
            ;;
        --server)
            opt_server=1
            opt_fields+="${opt_fields:+,}force_ssl,gzip,live_site,offset,secret,tmp_path"
            shift
            ;;
        --session)
            opt_session=1
            opt_fields+="${opt_fields:+,}session_handler,lifetime,shared_session,session_metadata,session_metadata_for_guest,session_filesystem_path,session_memcached_server_host,session_memcached_server_port,session_memcached_server_id,session_redis_server_host,session_redis_server_port,session_redis_server_auth,session_redis_server_db,session_redis_persist"
            shift
            ;;
        --site)
            opt_site=1
            opt_fields+="${opt_fields:+,}sitename,editor,captcha,list_limit,access,frontediting,helpurl,behind_loadbalancer,offline,offline_message,display_offline_message,offline_image,feed_limit,feed_email"
            shift
            ;;
        --fields)
            opt_fields+="${opt_fields:+,}${2}"
            shift 2
            ;;
        -h | --help)
            help
            ;;
        -*)
            unknown_option "${1}"
            ;;
        *)
            break
            ;;
        esac
    done

    declare -r configuration="$(realpath -L "${opt_file:-"${PWD}/configuration.php"}")"
    if [[ ! -f "${configuration}" ]]; then
        fail "configuration file not found: ${configuration}"
    fi

    case "$#" in
    0)
        config_list
        ;;
    1)
        config_get "$@"
        ;;
    2)
        config_set "$@"
        ;;
    *)
        fail 'too many arguments'
        ;;
    esac
}

config_get() {
    declare -r name="${1}"

    declare -A config=()
    config_load

    if ! [[ "${config[${name}]+_}" ]]; then
        fail "'${name}' not found"
    fi

    if [[ "${opt_raw}" -eq 1 ]]; then
        echo -n "${config[${name}]}"
    else
        unquote "${config[${name}]}"
    fi
    echo
}

config_set() {
    declare -r name="${1}"
    declare -r value="${2}"

    config_get "${name}" >/dev/null

    if [[ "${opt_raw}" -eq 1 ]]; then
        sed -Ei -e "s|(\\\$${name}\s*=\s*).+(\s*;)|\1${value}\2|" "${configuration}"
    else
        sed -Ei -e "s|(\\\$${name}\s*=\s*'?)[^']*('?\s*;)|\1'${value}'\2|" "${configuration}"
    fi
}

config_list() {
    declare key

    declare -A config=()
    config_load

    # Convert comma-separated fields to array if specified
    declare -a fields=()
    if [[ -n "${opt_fields}" ]]; then
        IFS=',' read -ra fields <<<"${opt_fields}"
        # Remove duplicates while preserving order
        mapfile -t fields < <(remove_duplicates "${fields[@]}")
    fi

    # If specific fields are requested, output them in the specified order
    if [[ -n "${fields[*]}" ]]; then
        for key in "${fields[@]}"; do
            # Check if the field exists in the config
            if [[ "${config[${key}]+_}" ]]; then
                if [[ "${opt_raw}" -eq 1 ]]; then
                    echo "${key}: ${config[${key}]}"
                else
                    echo "${key}: $(unquote "${config[${key}]}")"
                fi
            fi
        done | column -t -s : -l 2
    else
        # No specific fields requested, output all fields in the order they appear in the file
        for key in "${!config[@]}"; do
            if [[ "${opt_raw}" -eq 1 ]]; then
                echo "${key}: ${config[${key}]}"
            else
                echo "${key}: $(unquote "${config[${key}]}")"
            fi
        done | column -t -s : -l 2
    fi
}

config_load() {
    declare key
    declare value

    sed -En -e "s|.*\\\$(\w+)\s*=\s*(.*)\s*;.*|\1: \2|p" "${configuration}" |
        while IFS=': ' read -r key value; do
            config["${key}"]="${value}"
        done
}

unquote() {
    if is_quoted "${1}"; then
        echo -n "${1:1:-1}"
    else
        echo -n "${1}"
    fi
}

is_quoted() {
    [[ "${1:0:1}" == '"' && "${1: -1}" == '"' ]] || [[ "${1:0:1}" == "'" && "${1: -1}" == "'" ]]
}

# Remove duplicate values from an array while preserving order
remove_duplicates() {
    declare -A seen=()
    declare -a unique=()

    for item in "$@"; do
        if [[ -z "${seen[${item}]+_}" ]]; then
            unique+=("${item}")
            seen["${item}"]=1
        fi
    done

    # Output the unique array
    printf '%s\n' "${unique[@]}"
}

help() {
    echo -n "Manage Joomla! configuration values. (c) PopArtDesign, https://popartdesign.ru

Usage: ${app_name} [--raw] [--db] [--cors] [--mail] [--caching] [--cookie] [--debug] [--logging] [--metadata] [--proxy] [--seo] [--server] [--session] [--site] [--fields <fields>] [-f|--file <file>] [<name>] [<value>]

Arguments:
  <name>             Optional. The name of a configuration variable.
                     E.g.: 'db', 'user', 'debug'.
  <value>            Optional. The value of a configuration variable.
                     E.g.: 1, true, 'pAsSwOrD'.

Options:
  --raw              Use values without quoting/unquoting. When setting values,
                     do not automatically quote the value.
  --db               Show only database-related configuration values.
  --cors             Show only CORS-related configuration values.
  --mail             Show only mail-related configuration values.
  --caching          Show only caching-related configuration values.
  --cookie           Show only cookie-related configuration values.
  --debug            Show only debug-related configuration values.
  --logging          Show only logging-related configuration values.
  --metadata         Show only metadata-related configuration values.
  --proxy            Show only proxy-related configuration values.
  --seo              Show only SEO-related configuration values.
  --server           Show only server-related configuration values.
  --session          Show only session-related configuration values.
  --site             Show only site-related configuration values.
  --fields <fields>  Show only specified configuration fields (comma-separated).
                     E.g.: --fields db,user,password
  -f, --file <file>  Specify configuration file (default: ./configuration.php).
  -h, --help         Show this help message and exit.

Examples:
  ${app_name}                                # List all configuration values
  ${app_name} --raw                          # List all configuration values without unquoting
  ${app_name} --db                           # List only database-related configuration values
  ${app_name} --mail                         # List only mail-related configuration values
  ${app_name} --fields db,user,password      # List only specified fields
  ${app_name} host                           # Get the database host value
  ${app_name} --raw host                     # Get the database host value without unquoting
  ${app_name} host localhost                 # Set the database host to localhost
  ${app_name} -f /path/to/configuration.php  # Use a specific configuration file
"
    exit 0
}

unknown_option() {
    fail "unknown option '${1}'
Try '${app_name} --help' for more information."
}

value_required() {
    fail "value required '${1}'
Try '${app_name} --help' for more information."
}

fail() {
    error "${1}"
    exit "${2:-1}"
}

error() {
    echo "${app_name}: ${1}" >&2
}

main "$@"
