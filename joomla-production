#!/usr/bin/env bash

set -euo pipefail
shopt -s lastpipe nullglob dotglob

declare -r app_name="${0##*/}"

main() {
    declare opt_file opt_fix=false

    while [[ $# -gt 0 ]]; do
        case "${1:-}" in
        --)
            shift
            break
            ;;
        -f | --file)
            opt_file="${2}"
            shift 2
            ;;
        --fix)
            opt_fix=true
            shift
            ;;
        -h | --help)
            help
            ;;
        -*)
            unknown_option "${1}"
            ;;
        *)
            break
            ;;
        esac
    done

    declare -r configuration="$(realpath -L "${opt_file:-"${PWD}/configuration.php"}")"
    if [[ ! -f "${configuration}" ]]; then
        fail "configuration file not found: ${configuration}"
    fi

    if ! command -v joomla-config &>/dev/null; then
        fail "joomla-config command not found. Please make sure it's installed and in your PATH."
    fi

    check_production_settings
}

check_production_settings() {
    echo "Checking Joomla! production settings..."
    echo

    declare issues_found=0
    declare issues_fixed=0

    declare current_value
    declare expected_value

    # error_reporting
    current_value="$(setting_get error_reporting)"
    expected_value=none
    if ! setting_check error_reporting "${expected_value}" "${current_value}"; then
        ((issues_found += 1))

        if [[ "${opt_fix}" == true ]]; then
            setting_set error_reporting "${expected_value}" &&
                ((issues_fixed += 1))
        fi
    fi
    echo

    # debug
    current_value="$(setting_get debug)"
    [[ "${current_value}" =~ false|true ]] && expected_value='false' || expected_value=0
    if ! setting_check debug "${expected_value}" "${current_value}"; then
        ((issues_found += 1))

        if [[ "${opt_fix}" == true ]]; then
            setting_set debug "${expected_value}" &&
                ((issues_fixed += 1))
        fi
    fi
    echo

    # sef
    current_value="$(setting_get sef)"
    [[ "${current_value}" =~ false|true ]] && expected_value='true' || expected_value=1
    if ! setting_check sef "${expected_value}" "${current_value}"; then
        ((issues_found += 1))

        if [[ "${opt_fix}" == true ]]; then
            setting_set sef "${expected_value}" &&
                ((issues_fixed += 1))
        fi
    fi
    echo

    # sef_rewrite
    current_value="$(setting_get sef_rewrite)"
    [[ "${current_value}" =~ false|true ]] && expected_value='true' || expected_value=1
    if ! setting_check sef_rewrite "${expected_value}" "${current_value}"; then
        ((issues_found += 1))

        if [[ "${opt_fix}" == true ]]; then
            setting_set sef_rewrite "${expected_value}" &&
                ((issues_fixed += 1))
        fi
    fi
    echo

    declare -r base_path="${configuration%%/configuration.php}"

    # tmp_path
    current_value="$(setting_get tmp_path)"
    expected_value="${base_path}/tmp"
    if [[ "${current_value}" == "not_found" ]]; then
        show_warning "'tmp_path' not found in configuration"
        ((issues_found += 1))
    elif [[ ! -d "${current_value}" ]]; then
        show_issue "'tmp_path' directory does not exist" \
            "${current_value}" \
            "${expected_value}"
        ((issues_found += 1))

        if [[ "${opt_fix}" == true ]]; then
            setting_set_raw tmp_path "'${expected_value}'" &&
                ((issues_fixed += 1))
        fi
    else
        show_ok "'tmp_path' directory exists (${current_value})"
    fi
    echo

    # log_path
    current_value="$(setting_get log_path)"
    expected_value="${base_path}/administrator/logs"
    [[ ! -d "${base_path}/administrator/logs" ]] && [[ -d "${base_path}/logs" ]] &&
        expected_value="${base_path}/logs"

    if [[ "${current_value}" == "not_found" ]]; then
        show_warning "'log_path' not found in configuration"
        ((issues_found += 1))
    elif [[ ! -d "${current_value}" ]]; then
        show_issue "'log_path' directory does not exist" \
            "${current_value}" \
            "${expected_value}"
        ((issues_found += 1))

        if [[ "${opt_fix}" == true ]]; then
            setting_set_raw log_path "'${expected_value}'" &&
                ((issues_fixed += 1))
        fi
    else
        show_ok "'log_path' directory exists (${current_value})"
    fi
    echo

    # Summary
    if [[ "${issues_found}" -eq 0 ]]; then
        echo "All production settings checks passed!"
    elif [[ "${opt_fix}" == false ]]; then
        echo "Found ${issues_found} issue(s) that should be addressed for production."
        echo "Run with --fix option to automatically fix these issues."
    else
        echo "Fixed ${issues_fixed} issue(s)."
    fi
}

help() {
    echo "Check and fix Joomla! production settings. (c) PopArtDesign, https://popartdesign.ru

Usage: ${app_name} [-f|--file <file>] [--fix] [-h|--help]

Options:
  -f, --file <file>  Specify configuration file (default: ./configuration.php).
  --fix              Automatically fix issues found.
  -h, --help         Show this help message and exit.

Examples:
  ${app_name}                                      # Check production settings
  ${app_name} --fix                                # Check and fix production settings
  ${app_name} -f /path/to/configuration.php --fix
"
    exit 0
}

unknown_option() {
    fail "unknown option '${1}'
Try '${app_name} --help' for more information."
}

setting_get() {
    joomla-config -f "${configuration}" "${1}" 2>/dev/null || echo 'not_found'
}

setting_set() {
    echo "Setting '${1} to '${2}'..."
    joomla-config -f "${configuration}" "${1}" "${2}" || {
        error "Failed to set ${1}"
        return 1
    }
}

setting_set_raw() {
    echo "Setting '${1} to '${2}'..."
    joomla-config --raw -f "${configuration}" "${1}" "${2}" || {
        error "Failed to set ${1}"
        return 1
    }
}

setting_check() {
    declare -r setting="${1}"
    declare -r expected_value="${2}"
    declare -r current_value="${3}"

    if [[ "${current_value}" == "not_found" ]]; then
        show_warning "'${setting}' not found in configuration"
        return 1
    elif [[ "${current_value}" != "${expected_value}" ]]; then
        show_issue "'${setting}' should be set to '${expected_value}' in production" \
            "${current_value}" \
            "${expected_value}"
        return 1
    else
        show_ok "'${setting}' is properly configured (${current_value})"
    fi
}

show_ok() {
    echo "OK: $*"
}

show_info() {
    echo "INFO: $*"
}

show_warning() {
    echo "WARNING: $*"
}

show_issue() {
    echo "ISSUE: ${1}"
    echo "  Current value: ${2}"
    echo "  Recommended value: ${3}"
}

fail() {
    error "${1}"
    exit "${2:-1}"
}

error() {
    echo "${app_name}: ${1}" >&2
}

main "$@"
